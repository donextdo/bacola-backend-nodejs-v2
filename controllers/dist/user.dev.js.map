{"version":3,"sources":["user.js"],"names":["bcrypt","require","request","User","auth","register","req","res","userName","body","email","pwd","password","isFavourite","salt","genSaltSync","hashSync","user","findOne","userExists","status","send","message","save","response","console","log","login","compareSync","token","generateAccessToken","toJSON","getAllUsers","find","users","json","getOneUser","params","updateUserPassword","updatePassword","newUser","findOneAndUpdate","updateUser","updateBillingAddress","billingAddress","module","exports"],"mappings":"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","sourcesContent":["const bcrypt = require(\"bcryptjs\");\r\nconst { request } = require(\"express\");\r\nconst User = require(\"../models/user\");\r\nconst auth = require(\"../middlewares/jwt\");\r\n\r\n//register new user\r\nconst register = async (req, res) => {\r\n  const userName = req.body.userName;\r\n  const email = req.body.email;\r\n  const pwd = req.body.password;\r\n  const isFavourite = req.body.isFavourite;\r\n\r\n  const salt = bcrypt.genSaltSync(10);\r\n  const password = bcrypt.hashSync(pwd, salt);\r\n\r\n  const user = new User({\r\n    userName,\r\n    email,\r\n    password,\r\n    isFavourite,\r\n  });\r\n\r\n  try {\r\n    const userExists = await User.findOne({ email });\r\n    if (userExists) {\r\n      res.status(400).send({ message: \"User Already Exists\" });\r\n    } else {\r\n      let response = await user.save();\r\n      if (response) {\r\n        return res.status(201).send({ message: \"New User registered\" });\r\n      } else {\r\n        return res.status(500).send({ message: \"Internal server error\" });\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    return res.status(400).send({ message: \"Error while registering a user\" });\r\n  }\r\n};\r\n\r\n//login user\r\nconst login = async (req, res) => {\r\n  const email = req.body.email;\r\n  const password = req.body.password;\r\n\r\n  try {\r\n    const user = await User.findOne({ email: email });\r\n\r\n    if (user) {\r\n      if (user && bcrypt.compareSync(password, user.password)) {\r\n        const token = auth.generateAccessToken(email);\r\n        return res.status(200).send({ ...user.toJSON(), token });\r\n      } else {\r\n        return res.status(400).send({\r\n          message: \"Such user does not exist check your credentials \",\r\n        });\r\n      }\r\n    } else {\r\n      return res.status(404).send({ message: \"Such user does not exist\" });\r\n    }\r\n  } catch (err) {\r\n    return res\r\n      .status(400)\r\n      .send({ message: \"Such user does not exist check your credentials\" });\r\n  }\r\n};\r\n\r\nconst getAllUsers = async (req, res) => {\r\n  try {\r\n    let users = await User.find();\r\n    if (users) {\r\n      return res.json(users);\r\n    } else {\r\n      return res.status(404).send({ message: \"Error on retrieving users\" });\r\n    }\r\n  } catch (err) {\r\n    return res.status(500).send({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst getOneUser = async (req, res) => {\r\n  const email = req.params.email;\r\n\r\n  try {\r\n    let user = await User.findOne({\r\n      email: email,\r\n    });\r\n    if (user) {\r\n      return res.json(user);\r\n    } else {\r\n      return res.status(404).send({ message: \"No such user found\" });\r\n    }\r\n  } catch (err) {\r\n    return res.status(500).send({ message: \"Internal Server Error\" });\r\n  }\r\n};\r\n\r\nconst updateUserPassword = async (req, res) => {\r\n  const email = req.params.email;\r\n  const password = req.params.pwd;\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (user) {\r\n      const salt = bcrypt.genSaltSync(10);\r\n      const updatePassword = bcrypt.hashSync(password, salt);\r\n\r\n      const newUser = {\r\n        userName: user.userName,\r\n        email: user.email,\r\n        password: updatePassword,\r\n        isFavourite: user.isFavourite,\r\n      };\r\n\r\n      try {\r\n        const response = await User.findOneAndUpdate({ email: email }, newUser);\r\n        if (response) {\r\n          return res\r\n            .status(200)\r\n            .send({ message: \"Successfully updated Password\" });\r\n        } else {\r\n          return res.status(500).send({ message: \"Internal server error\" });\r\n        }\r\n      } catch (err) {\r\n        return res\r\n          .status(400)\r\n          .send({ message: \"Unable to update recheck your email\" });\r\n      }\r\n    } else {\r\n      return res\r\n        .status(404)\r\n        .send({ message: \"No such user with entered email\" });\r\n    }\r\n  } catch (err) {\r\n    return res.status(404).send({ message: \"No such user with entered email\" });\r\n  }\r\n};\r\n\r\nconst updateUser = async (req, res) => {\r\n  const email = req.params.email;\r\n  const user = await User.findOne({ email: email });\r\n  const password = user.password;\r\n\r\n  const updateUser = {\r\n    userName: req.body.userName,\r\n    email: req.body.email,\r\n    password: password,\r\n    isFavourite: req.body.isFavourite,\r\n  };\r\n\r\n  try {\r\n    const response = await User.findOneAndUpdate({ email: email }, updateUser);\r\n    if (response) {\r\n      return res\r\n        .status(200)\r\n        .send({ message: \"Successfully updated User Details\" });\r\n    } else {\r\n      return res.status(500).send({ message: \"Internal server error\" });\r\n    }\r\n  } catch (err) {\r\n    return res\r\n      .status(400)\r\n      .send({ message: \"Unable to update recheck your email\" });\r\n  }\r\n};\r\n\r\nconst updateBillingAddress = async (req, res) => {\r\n  const email = req.params.email;\r\n  const user = await User.findOne({ email: email });\r\n  const password = user.password;\r\n\r\n  const updateBillingAddress = {\r\n    userName: req.body.userName,\r\n    email: req.body.email,\r\n    password: password,\r\n    isFavourite: req.body.isFavourite,\r\n    billingAddress: req.body.billingAddress,\r\n  };\r\n\r\n  try {\r\n    const response = await User.findOneAndUpdate(\r\n      { email: email },\r\n      updateBillingAddress\r\n    );\r\n    if (response) {\r\n      return res\r\n        .status(200)\r\n        .send({ message: \"Successfully updated User Details\" });\r\n    } else {\r\n      return res.status(500).send({ message: \"Internal server error\" });\r\n    }\r\n  } catch (err) {\r\n    return res\r\n      .status(400)\r\n      .send({ message: \"Unable to update recheck your email\" });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  getAllUsers,\r\n  getOneUser,\r\n  updateUserPassword,\r\n  updateUser,\r\n  updateBillingAddress,\r\n};\r\n"],"file":"user.dev.js"}