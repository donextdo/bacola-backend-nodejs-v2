{"version":3,"sources":["product.js"],"names":["Product","require","request","addProduct","req","res","body","brand","description","image","category","quantity","price","isAvailable","skuNumber","title","expDate","Date","mfgDate","discount","review","createdAt","updatedAt","deletedAt","product","save","message","console","log","_context","t0","status","send","getAllProduct","products","regeneratorRuntime","async","_context2","prev","next","awrap","find","sent","abrupt","json","stop","getProductById","productId","response","_context3","params","id","findById","updateProduct","Id","productUpdate","_context4","type","findOneAndUpdate","_id","updateDeleteDate","_context5","deleteProduct","_context6","findByIdAndDelete","deleteUpdate"],"mappings":"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","file":"product.min.js","sourcesContent":["const Product = require(\"../models/product\");\r\nconst { request } = require(\"express\");\r\n\r\n//insert product\r\nconst addProduct = async (req, res) => {\r\n  const title = req.body.title;\r\n  const brand = req.body.brand;\r\n  const description = req.body.description;\r\n  const image = req.body.image;\r\n  const category = req.body.category;\r\n  const quantity = req.body.quantity;\r\n  const price = req.body.price;\r\n  const isAvailable = req.body.isAvailable;\r\n  const skuNumber = req.body.price;\r\n  const type = req.body.type;\r\n  const mfgDate = req.body.mfgDate;\r\n  const expDate = req.body.expDate;\r\n  const discount = req.body.discount;\r\n  const review = req.body.review;\r\n  const createdAt = new Date();\r\n  const updatedAt = null;\r\n  const deletedAt = null;\r\n  //const isFavourite = req.body.isFavourite;\r\n\r\n  const product = new Product({\r\n    title,\r\n    brand,\r\n    description,\r\n    image,\r\n    category,\r\n    quantity,\r\n    price,\r\n    isAvailable,\r\n    skuNumber,\r\n    type,\r\n    mfgDate,\r\n    expDate,\r\n    discount,\r\n    review,\r\n    createdAt,\r\n    updatedAt,\r\n    deletedAt,\r\n    // isFavourite,\r\n  });\r\n  try {\r\n    let response = await product.save();\r\n    if (response) {\r\n      return res.status(201).send({ message: \"New Product Insered\" });\r\n    } else {\r\n      return res.status(500).send({ message: \"Internal server error\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    return res.status(400).send({ message: \"Error while saving products\" });\r\n  }\r\n};\r\n\r\n//get All Product\r\nconst getAllProduct = async (req, res) => {\r\n  try {\r\n    let products = await Product.find();\r\n    if (products) {\r\n      return res.json(products);\r\n    } else {\r\n      return res\r\n        .status(404)\r\n        .send({ message: \"Error occured when retrieving products\" });\r\n    }\r\n  } catch (err) {\r\n    return res.status(500).send({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\n//get product by id\r\nconst getProductById = async (req, res) => {\r\n  const productId = req.params.id;\r\n  //console.log(\"data\", productId);\r\n\r\n  try {\r\n    let response = await Product.findById(productId);\r\n    // console.log(\"response\", response);\r\n    if (response) {\r\n      return res.json(response);\r\n    } else {\r\n      return res.status(404).send({ message: \"No such product found\" });\r\n    }\r\n  } catch (err) {\r\n    return res.status(404).send({ message: \"No such product found\" });\r\n  }\r\n};\r\n\r\n//update product by id\r\nconst updateProduct = async (req, res) => {\r\n  const Id = req.params.id;\r\n\r\n  let productUpdate = {\r\n    Id: Id,\r\n    title: req.body.title,\r\n    brand: req.body.brand,\r\n    description: req.body.description,\r\n    image: req.body.image,\r\n    category: req.body.category,\r\n    quantity: req.body.quantity,\r\n    price: req.body.price,\r\n    isAvailable: req.body.isAvailable,\r\n    skuNumber: req.body.price,\r\n    type: req.body.type,\r\n    mfgDate: req.body.mfgDate,\r\n    expDate: req.body.expDate,\r\n    discount: req.body.discount,\r\n    review: req.body.review,\r\n    updatedAt: new Date(),\r\n  };\r\n\r\n  try {\r\n    const response = await Product.findOneAndUpdate({ _id: Id }, productUpdate);\r\n    \r\n    if (response) {\r\n      return res.status(200).send({ message: \"Successfully updated Product \" });\r\n    } else {\r\n      return res.status(500).send({ message: \"Internal server error\" });\r\n    }\r\n  } catch (err) {\r\n    return res.status(400).send({ message: \"Unable to update\" });\r\n  }\r\n};\r\n\r\nconst deleteUpdate = async (req, res) => {\r\n  const Id = req.params.id;\r\n  let updateDeleteDate = await Product.findById(Id);\r\n  updateDeleteDate.deletedAt = new Date();\r\n  // return await response.save();\r\n  try {\r\n    let response = await updateDeleteDate.save();\r\n    if (response) {\r\n      return res.status(201).send({ message: \"delete date is updated\" });\r\n    } else {\r\n      return res.status(500).send({ message: \"Internal server error\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    return res.status(400).send({ message: \"Error while saving products\" });\r\n  }\r\n};\r\n\r\n//delete product by id\r\nconst deleteProduct = async (req, res) => {\r\n  const Id = req.params.id;\r\n  try {\r\n    const response = await Product.findByIdAndDelete({ _id: Id });\r\n    if (response) {\r\n      return res\r\n        .status(204)\r\n        .send({ message: \"Successfully deleted a Request\" });\r\n    } else {\r\n      return res.status(500).send({ message: \"Internal server error\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err.message);\r\n    return res.status(400).send({ message: \"Could not delete the request\" });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  addProduct,\r\n  getAllProduct,\r\n  getProductById,\r\n  updateProduct,\r\n  deleteProduct,\r\n  deleteUpdate,\r\n};\r\n"]}