{"version":3,"sources":["productAdditional.js"],"names":["Product","require","request","getproductByfilter","req","res","baseUrl","categoryId","subCategories","brands","minPrice","maxPrice","subCatArr","brandArr","url","response","products","regeneratorRuntime","async","_context","prev","next","query","parseFloat","min_price","max_price","split","awrap","axios","sent","data","length","filter","product","includes","brand","isNaN","price","status","json","t0","stop","module","exports"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,8BACJA,QAAQ,WAApBC,iBAAAA,QADFF,MAAUC,QAAQ,SAIlBE,mBAHsB,SAGMC,EAAKC,GAHX,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,mBAAAC,MAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,KAAA,EAAA,OAApBnB,EAIU,4BAJUiB,EAAAC,KAAA,EAOlBb,EAAaH,EAAIkB,MAAMf,WAJ3BJ,EAAqBC,EAAAkB,MAArBnB,cAAqBM,EAAAL,EAAAkB,MAAAb,OAAAC,EAAAa,WAAAnB,EAAAkB,MAAAE,WAAAb,EAAAY,WAAAnB,EAAAkB,MAAAG,WAAAb,EACT,iBAAVN,EAAUE,EADSkB,MAAA,KAAA,GAIjBnB,EAAuBA,iBAANe,EAJAb,EAAAiB,MAAA,KAAA,GAMjBjB,EACWc,EAAXb,EAAAA,OAAAA,GAAAA,OACAC,EADAD,cAAAA,OACsBN,GADtBM,GAAAA,OAGAE,EAHAF,cAAAA,OAIGF,GAdeW,EAAAE,KAAA,GAAAJ,mBAAAU,MAgBPC,MAAOnB,IAAPK,IAhBO,KAAA,GAgBlBD,EAhBkBM,EAAAU,KAGDb,EAAAD,EAAAe,KAAA,EAAAjB,EAAAkB,SAuBrBf,EAAWA,EAASgB,OAAO,SAACC,GAAD,OAAapB,EAASqB,SAASD,EAAQE,UAFhEnB,MAAAA,IAAmBoB,MArBAzB,KA2BrBK,EAAWA,EAASgB,OALtB,SAAAC,GAAA,OAAIpB,EAAAwB,OAAqB3B,GAAAuB,EAAAI,OAAA1B,KAExBN,EAAAiC,OAAA,KAAAC,KAAAvB,GA3BuBG,EAAAE,KAAA,GAAA,MAAA,KAAA,GAAAF,EAAAC,KAAA,GAAAD,EAAAqB,GAAArB,EAAA,MAAA,GA6BxBd,EAAAiC,OAAKF,KAAKG,KAAC7B,CAAAA,QAAc0B,iBA7BD,KAAA,GAAA,IAAA,MAAA,OAAAjB,EAAAsB,SAAA,KAAA,KAAA,CAAA,CAAA,EAAA,OAiCvBC,OAAAC,QAAA,CASHxC,mBAAAA","file":"productAdditional.min.js","sourcesContent":["const Product = require(\"../models/product\");\r\nconst { request } = require(\"express\");\r\nconst axios = require(\"axios\");\r\n\r\nconst getproductByfilter = async (req, res) => {\r\n  const baseUrl = \"http://localhost:4000/api\";\r\n\r\n  try {\r\n    const categoryId = req.query.categoryId;\r\n    const subCategories = req.query.subCategories;\r\n    const brands = req.query.brands;\r\n    const minPrice = parseFloat(req.query.min_price);\r\n    const maxPrice = parseFloat(req.query.max_price);\r\n\r\n    const subCatArr =\r\n      typeof subCategories === \"string\" ? subCategories.split(\",\") : [];\r\n\r\n    const brandArr = typeof brands === \"string\" ? brands.split(\",\") : [];\r\n\r\n    const url =\r\n      subCatArr.length > 0\r\n        ? `${baseUrl}/products/${subCatArr}`\r\n        : `${baseUrl}/products/${categoryId}`;\r\n    const response = await axios.get(url);\r\n\r\n    let products = response.data;\r\n    if (brandArr.length > 0) {\r\n      products = products.filter((product) => brandArr.includes(product.brand));\r\n    }\r\n\r\n    if (!isNaN(minPrice) && !isNaN(maxPrice)) {\r\n      products = products.filter(\r\n        (product) => product.price >= minPrice && product.price <= maxPrice\r\n      );\r\n    }\r\n\r\n    res.status(200).json(products);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Server Error\" });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getproductByfilter,\r\n};\r\n"]}