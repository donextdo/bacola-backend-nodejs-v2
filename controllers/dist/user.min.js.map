{"version":3,"sources":["user.js"],"names":["bcrypt","require","request","User","auth","register","req","res","userName","email","pwd","isFavourite","salt","password","user","regeneratorRuntime","async","_context","prev","next","body","genSaltSync","hashSync","awrap","findOne","sent","save","abrupt","status","send","message","t0","console","log","stop","login","token","_context2","userExists","compareSync","toJSON","response","getAllUsers","users","_context3","find","json","getOneUser","_context4","params","updateUserPassword","updatePassword","newUser","_context5","findOneAndUpdate","t1","updateUser","_context6","updateBillingAddress","_context7","billingAddress","module","exports"],"mappings":"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","file":"user.min.js","sourcesContent":["const bcrypt = require(\"bcryptjs\");\r\nconst { request } = require(\"express\");\r\nconst User = require(\"../models/user\");\r\nconst auth = require(\"../middlewares/jwt\");\r\n\r\n//register new user\r\nconst register = async (req, res) => {\r\n  const userName = req.body.userName;\r\n  const email = req.body.email;\r\n  const pwd = req.body.password;\r\n  const isFavourite = req.body.isFavourite;\r\n\r\n  const salt = bcrypt.genSaltSync(10);\r\n  const password = bcrypt.hashSync(pwd, salt);\r\n\r\n  const user = new User({\r\n    userName,\r\n    email,\r\n    password,\r\n    isFavourite,\r\n  });\r\n\r\n  try {\r\n    const userExists = await User.findOne({ email });\r\n    if (userExists) {\r\n      res.status(400).send({ message: \"User Already Exists\" });\r\n    } else {\r\n      let response = await user.save();\r\n      if (response) {\r\n        return res.status(201).send({ message: \"New User registered\" });\r\n      } else {\r\n        return res.status(500).send({ message: \"Internal server error\" });\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    return res.status(400).send({ message: \"Error while registering a user\" });\r\n  }\r\n};\r\n\r\n//login user\r\nconst login = async (req, res) => {\r\n  const email = req.body.email;\r\n  const password = req.body.password;\r\n\r\n  try {\r\n    const user = await User.findOne({ email: email });\r\n\r\n    if (user) {\r\n      if (user && bcrypt.compareSync(password, user.password)) {\r\n        const token = auth.generateAccessToken(email);\r\n        return res.status(200).send({ ...user.toJSON(), token });\r\n      } else {\r\n        return res.status(400).send({\r\n          message: \"Such user does not exist check your credentials \",\r\n        });\r\n      }\r\n    } else {\r\n      return res.status(404).send({ message: \"Such user does not exist\" });\r\n    }\r\n  } catch (err) {\r\n    return res\r\n      .status(400)\r\n      .send({ message: \"Such user does not exist check your credentials\" });\r\n  }\r\n};\r\n\r\nconst getAllUsers = async (req, res) => {\r\n  try {\r\n    let users = await User.find();\r\n    if (users) {\r\n      return res.json(users);\r\n    } else {\r\n      return res.status(404).send({ message: \"Error on retrieving users\" });\r\n    }\r\n  } catch (err) {\r\n    return res.status(500).send({ message: \"Internal server error\" });\r\n  }\r\n};\r\n\r\nconst getOneUser = async (req, res) => {\r\n  const email = req.params.email;\r\n\r\n  try {\r\n    let user = await User.findOne({\r\n      email: email,\r\n    });\r\n    if (user) {\r\n      return res.json(user);\r\n    } else {\r\n      return res.status(404).send({ message: \"No such user found\" });\r\n    }\r\n  } catch (err) {\r\n    return res.status(500).send({ message: \"Internal Server Error\" });\r\n  }\r\n};\r\n\r\nconst updateUserPassword = async (req, res) => {\r\n  const email = req.params.email;\r\n  const password = req.params.pwd;\r\n\r\n  try {\r\n    const user = await User.findOne({ email });\r\n    if (user) {\r\n      const salt = bcrypt.genSaltSync(10);\r\n      const updatePassword = bcrypt.hashSync(password, salt);\r\n\r\n      const newUser = {\r\n        userName: user.userName,\r\n        email: user.email,\r\n        password: updatePassword,\r\n        isFavourite: user.isFavourite,\r\n      };\r\n\r\n      try {\r\n        const response = await User.findOneAndUpdate({ email: email }, newUser);\r\n        if (response) {\r\n          return res\r\n            .status(200)\r\n            .send({ message: \"Successfully updated Password\" });\r\n        } else {\r\n          return res.status(500).send({ message: \"Internal server error\" });\r\n        }\r\n      } catch (err) {\r\n        return res\r\n          .status(400)\r\n          .send({ message: \"Unable to update recheck your email\" });\r\n      }\r\n    } else {\r\n      return res\r\n        .status(404)\r\n        .send({ message: \"No such user with entered email\" });\r\n    }\r\n  } catch (err) {\r\n    return res.status(404).send({ message: \"No such user with entered email\" });\r\n  }\r\n};\r\n\r\nconst updateUser = async (req, res) => {\r\n  const email = req.params.email;\r\n  const user = await User.findOne({ email: email });\r\n  const password = user.password;\r\n\r\n  const updateUser = {\r\n    userName: req.body.userName,\r\n    email: req.body.email,\r\n    password: password,\r\n    isFavourite: req.body.isFavourite,\r\n  };\r\n\r\n  try {\r\n    const response = await User.findOneAndUpdate({ email: email }, updateUser);\r\n    if (response) {\r\n      return res\r\n        .status(200)\r\n        .send({ message: \"Successfully updated User Details\" });\r\n    } else {\r\n      return res.status(500).send({ message: \"Internal server error\" });\r\n    }\r\n  } catch (err) {\r\n    return res\r\n      .status(400)\r\n      .send({ message: \"Unable to update recheck your email\" });\r\n  }\r\n};\r\n\r\nconst updateBillingAddress = async (req, res) => {\r\n  const email = req.params.email;\r\n  const user = await User.findOne({ email: email });\r\n  const password = user.password;\r\n\r\n  const updateBillingAddress = {\r\n    userName: req.body.userName,\r\n    email: req.body.email,\r\n    password: password,\r\n    isFavourite: req.body.isFavourite,\r\n    billingAddress: req.body.billingAddress,\r\n  };\r\n\r\n  try {\r\n    const response = await User.findOneAndUpdate(\r\n      { email: email },\r\n      updateBillingAddress\r\n    );\r\n    if (response) {\r\n      return res\r\n        .status(200)\r\n        .send({ message: \"Successfully updated User Details\" });\r\n    } else {\r\n      return res.status(500).send({ message: \"Internal server error\" });\r\n    }\r\n  } catch (err) {\r\n    return res\r\n      .status(400)\r\n      .send({ message: \"Unable to update recheck your email\" });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  register,\r\n  login,\r\n  getAllUsers,\r\n  getOneUser,\r\n  updateUserPassword,\r\n  updateUser,\r\n  updateBillingAddress,\r\n};\r\n"]}