{"version":3,"sources":["productAdditional.js"],"names":["Product","require","request","axios","getproductByfilter","req","res","baseUrl","categoryId","query","subCategories","brands","minPrice","parseFloat","min_price","maxPrice","max_price","subCatArr","split","brandArr","url","length","get","response","products","data","filter","product","includes","brand","isNaN","price","status","json","message","module","exports"],"mappings":";;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,mBAAD,CAAvB;;eACoBA,OAAO,CAAC,SAAD,C;IAAnBC,O,YAAAA,O;;AACR,IAAMC,KAAK,GAAGF,OAAO,CAAC,OAAD,CAArB;;AAEA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,UAAAA,OADmB,GACT,2BADS;AAAA;AAIjBC,UAAAA,UAJiB,GAIJH,GAAG,CAACI,KAAJ,CAAUD,UAJN;AAKjBE,UAAAA,aALiB,GAKDL,GAAG,CAACI,KAAJ,CAAUC,aALT;AAMjBC,UAAAA,MANiB,GAMRN,GAAG,CAACI,KAAJ,CAAUE,MANF;AAOjBC,UAAAA,QAPiB,GAONC,UAAU,CAACR,GAAG,CAACI,KAAJ,CAAUK,SAAX,CAPJ;AAQjBC,UAAAA,QARiB,GAQNF,UAAU,CAACR,GAAG,CAACI,KAAJ,CAAUO,SAAX,CARJ;AAUjBC,UAAAA,SAViB,GAWrB,OAAOP,aAAP,KAAyB,QAAzB,GAAoCA,aAAa,CAACQ,KAAd,CAAoB,GAApB,CAApC,GAA+D,EAX1C;AAajBC,UAAAA,QAbiB,GAaN,OAAOR,MAAP,KAAkB,QAAlB,GAA6BA,MAAM,CAACO,KAAP,CAAa,GAAb,CAA7B,GAAiD,EAb3C;AAejBE,UAAAA,GAfiB,GAgBrBH,SAAS,CAACI,MAAV,GAAmB,CAAnB,aACOd,OADP,uBAC2BU,SAD3B,cAEOV,OAFP,uBAE2BC,UAF3B,CAhBqB;AAAA;AAAA,0CAmBAL,KAAK,CAACmB,GAAN,CAAUF,GAAV,CAnBA;;AAAA;AAmBjBG,UAAAA,QAnBiB;AAqBnBC,UAAAA,QArBmB,GAqBRD,QAAQ,CAACE,IArBD;;AAsBvB,cAAIN,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AACvBG,YAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CAAgB,UAACC,OAAD;AAAA,qBAAaR,QAAQ,CAACS,QAAT,CAAkBD,OAAO,CAACE,KAA1B,CAAb;AAAA,aAAhB,CAAX;AACD;;AAED,cAAI,CAACC,KAAK,CAAClB,QAAD,CAAN,IAAoB,CAACkB,KAAK,CAACf,QAAD,CAA9B,EAA0C;AACxCS,YAAAA,QAAQ,GAAGA,QAAQ,CAACE,MAAT,CACT,UAACC,OAAD;AAAA,qBAAaA,OAAO,CAACI,KAAR,IAAiBnB,QAAjB,IAA6Be,OAAO,CAACI,KAAR,IAAiBhB,QAA3D;AAAA,aADS,CAAX;AAGD;;AAEDT,UAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBT,QAArB;AAhCuB;AAAA;;AAAA;AAAA;AAAA;AAkCvBlB,UAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,YAAAA,OAAO,EAAE;AAAX,WAArB;;AAlCuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAsCAC,MAAM,CAACC,OAAP,GAAiB;AACfhC,EAAAA,kBAAkB,EAAlBA;AADe,CAAjB","sourcesContent":["const Product = require(\"../models/product\");\r\nconst { request } = require(\"express\");\r\nconst axios = require(\"axios\");\r\n\r\nconst getproductByfilter = async (req, res) => {\r\n  const baseUrl = \"http://localhost:4000/api\";\r\n\r\n  try {\r\n    const categoryId = req.query.categoryId;\r\n    const subCategories = req.query.subCategories;\r\n    const brands = req.query.brands;\r\n    const minPrice = parseFloat(req.query.min_price);\r\n    const maxPrice = parseFloat(req.query.max_price);\r\n\r\n    const subCatArr =\r\n      typeof subCategories === \"string\" ? subCategories.split(\",\") : [];\r\n\r\n    const brandArr = typeof brands === \"string\" ? brands.split(\",\") : [];\r\n\r\n    const url =\r\n      subCatArr.length > 0\r\n        ? `${baseUrl}/products/${subCatArr}`\r\n        : `${baseUrl}/products/${categoryId}`;\r\n    const response = await axios.get(url);\r\n\r\n    let products = response.data;\r\n    if (brandArr.length > 0) {\r\n      products = products.filter((product) => brandArr.includes(product.brand));\r\n    }\r\n\r\n    if (!isNaN(minPrice) && !isNaN(maxPrice)) {\r\n      products = products.filter(\r\n        (product) => product.price >= minPrice && product.price <= maxPrice\r\n      );\r\n    }\r\n\r\n    res.status(200).json(products);\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Server Error\" });\r\n  }\r\n};\r\n\r\nmodule.exports = {\r\n  getproductByfilter,\r\n};\r\n"],"file":"productAdditional.dev.js"}